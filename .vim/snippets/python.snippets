# source git: gilsondev / snipmate_for_django

# Model Fields

# Note: Optional arguments are using defaults that match what Django will use
# as a default, e.g. with max_length fields.  Doing this as a form of self
# documentation and to make it easy to know whether you should override the
# default or not.

# Note: Optional arguments that are booleans will use the opposite since you
# can either not specify them, or override them, e.g. auto_now_add=False.

snippet auto
	${1:FIELDNAME} = models.AutoField()
snippet bool
	${1:FIELDNAME} = models.BooleanField(${2:default=True})
snippet char
	${1:FIELDNAME} = models.CharField(max_length=${2}${3:, blank=True})
snippet comma
	${1:FIELDNAME} = models.CommaSeparatedIntegerField(max_length=${2}${3:, blank=True})
snippet date
	${1:FIELDNAME} = models.DateField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
snippet datetime
	${1:FIELDNAME} = models.DateTimeField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
snippet decimal
	${1:FIELDNAME} = models.DecimalField(max_digits=${2}, decimal_places=${3})
snippet email
	${1:FIELDNAME} = models.EmailField(max_length=${2:75}${3:, blank=True})
snippet file
	${1:FIELDNAME} = models.FileField(upload_to=${2:path/for/upload}${3:, max_length=100})
snippet filepath
	${1:FIELDNAME} = models.FilePathField(path=${2:"/abs/path/to/dir"}${3:, max_length=100}${4:, match="*.ext"}${5:, recursive=True}${6:, blank=True, })
snippet float
	${1:FIELDNAME} = models.FloatField()
snippet image
	${1:FIELDNAME} = models.ImageField(upload_to=${2:path/for/upload}${3:, height_field=height, width_field=width}${4:, max_length=100})
snippet int
	${1:FIELDNAME} = models.IntegerField()
snippet ip
	${1:FIELDNAME} = models.IPAddressField()
snippet nullbool
	${1:FIELDNAME} = models.NullBooleanField()
snippet posint
	${1:FIELDNAME} = models.PositiveIntegerField()
snippet possmallint
	${1:FIELDNAME} = models.PositiveSmallIntegerField()
snippet slug
	${1:FIELDNAME} = models.SlugField(max_length=${2:50}${3:, blank=True})
snippet smallint
	${1:FIELDNAME} = models.SmallIntegerField()
snippet text
	${1:FIELDNAME} = models.TextField(${2:blank=True})
snippet time
	${1:FIELDNAME} = models.TimeField(${2:auto_now_add=True, auto_now=True}${3:, blank=True, null=True})
snippet url
	${1:FIELDNAME} = models.URLField(${2:verify_exists=False}${3:, max_length=200}${4:, blank=True})
snippet xml
	${1:FIELDNAME} = models.XMLField(schema_path=${2:None}${3:, blank=True})
# Relational Fields
snippet fk
	${1:FIELDNAME} = models.ForeignKey(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, to_field=''})
snippet m2m
	${1:FIELDNAME} = models.ManyToManyField(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, symmetrical=False}${6:, through=''}${7:, db_table=''})
snippet o2o
	${1:FIELDNAME} = models.OneToOneField(${2:OtherModel}${3:, parent_link=True}${4:, related_name=''}${5:, limit_choices_to=}${6:, to_field=''})

# Form Fields

# Note: Optional arguments are using defaults that match what Django will use
# as a default, e.g. with max_length fields.  Doing this as a form of self
# documentation and to make it easy to know whether you should override the
# default or not.

# Note: Optional arguments that are booleans will use the opposite since you
# can either not specify them, or override them, e.g. required=False.

snippet fauto
	${1:FIELDNAME} = forms.AutoField()
snippet fbool
	${1:FIELDNAME} = forms.BooleanField(${2:default=True})
snippet fchar
	${1:FIELDNAME} = forms.CharField(max_length=${2}${3:, required=True})
snippet fcomma
	${1:FIELDNAME} = forms.CommaSeparatedIntegerField(max_length=${2}${3:, required=True})
snippet fdate
	${1:FIELDNAME} = forms.DateField(${2:auto_now_add=True, auto_now=True}${3:, required=True})
snippet fdatetime
	${1:FIELDNAME} = forms.DateTimeField(${2:auto_now_add=True, auto_now=True}${3:, required=True})
snippet fdecimal
	${1:FIELDNAME} = forms.DecimalField(max_digits=${2}, decimal_places=${3})
snippet femail
	${1:FIELDNAME} = forms.EmailField(max_length=${2:75}${3:, required=True})
snippet ffile
	${1:FIELDNAME} = forms.FileField(upload_to=${2:path/for/upload}${3:, max_length=100})
snippet ffilepath
	${1:FIELDNAME} = forms.FilePathField(path=${2:"/abs/path/to/dir"}${3:, max_length=100}${4:, match="*.ext"}${5:, recursive=True}${6:, required=True, })
snippet ffloat
	${1:FIELDNAME} = forms.FloatField()
snippet fimage
	${1:FIELDNAME} = forms.ImageField(upload_to=${2:path/for/upload}${3:, height_field=height, width_field=width}${4:, max_length=100})
snippet fint
	${1:FIELDNAME} = forms.IntegerField()
snippet fip
	${1:FIELDNAME} = forms.IPAddressField()
snippet fnullbool
	${1:FIELDNAME} = forms.NullBooleanField()
snippet fposint
	${1:FIELDNAME} = forms.PositiveIntegerField()
snippet fpossmallint
	${1:FIELDNAME} = forms.PositiveSmallIntegerField()
snippet fslug
	${1:FIELDNAME} = forms.SlugField(max_length=${2:50}${3:, required=True})
snippet fsmall
	${1:FIELDNAME} = forms.SmallIntegerField()
snippet ftext
	${1:FIELDNAME} = forms.CharField(${2:required=True}, widget=forms.Textarea)
snippet ftime
	${1:FIELDNAME} = forms.TimeField(${2:auto_now_add=True, auto_now=True}${3:, required=True})
snippet furl
	${1:FIELDNAME} = forms.URLField(${2:verify_exists=False}${3:, max_length=200}${4:, required=True})
snippet fxml
	${1:FIELDNAME} = forms.XMLField(schema_path=${2:None}${3:, required=True})
snippet fchoice
	${1:FIELDNAME} = forms.ChoiceField(label='')
snippet fmchoice
	${1:FIELDNAME} = forms.MultipleChoiceField(label='')
# Relational Fields
snippet ffk
	${1:FIELDNAME} = forms.ModelChoiceField(${2:, queryset=Model.objects.all()}${3:, empty_label=''})
snippet fm2m
	${1:FIELDNAME} = forms.ModelMultipleChoiceField(${2:, queryset=Model.objects.all()}${3:, empty_label=''})

##
## Code Skeletons
##

# Methods

snippet __unicode__
	def __unicode__(self):
		${1}

snippet get_absolute_url
    @models.permalink
    def get_absolute_url(self):
        return ('${1:view_or_url_name}' ${2})


# Form and Models

snippet form
    class ${1:FormName}(forms.Form):
        """${2:docstring}"""
        ${3}

snippet model
    class ${1:ModelName}(models.Model):
        """${2:docstring}"""
        ${3}
        
        class Meta:
            ${4}
        
        def __unicode__(self):
            ${5}
        
        def save(self, force_insert=False, force_update=False):
            ${6}
        
        @models.permalink
        def get_absolute_url(self):
            return ('${7:view_or_url_name}' ${8})

# Admin

snippet modeladmin
    class ${1:ModelName}Admin(admin.ModelAdmin):
        ${2}
    
    admin.site.register($1, $1Admin)

snippet tabularinline
    class ${1:ModelName}Inline(admin.TabularInline):
        model = $1
        extra = ${2:3}

snippet stackedinline
    class ${1:ModelName}Inline(admin.StackedInline):
        model = $1
        extra = ${2:3}

# Views

snippet r2r
    return render_to_response('${1:template.html}', {
            ${2}
        }${3:, context_instance=RequestContext(request)}
    )

snippet action
    def ${1:action}(request):
        """ Action """
        pass

# Tests

snippet testclass
	class ${1:ClassTest}(TestCase):
		"""{$2}"""
		pass

snippet setup
	def setUp(self):
		"""${1}"""
		pass

snippet test
	def test_${1:method}(self):
		"""{$2}"""
		pass

# snippets for ultisnip as inspiration
# snippet mform "Model form" 
# class ${1}Form(ModelForm):
#     """Modelform for $1"""
# 
#     class Meta:
#         model = $1
#     $0
# endsnippet
# 
# snippet cleanf "cleand field validation" b
# def clean_${1:field}(self):
#     # should raise forms.ValidationError
#     data = self.cleaned_data['$1']
#     ${0}
#     return data
# endsnippet
# 
# admin.site.register($1, $1Admin)
# endsnippet
# 
# snippet fview "form view" b
# class ${1:ClassName}(FormView):
#     """${0:docstring for $1}"""
# 
#     form_class = ${2:}
#     template_name = '${3:}'
#     success_url = reverse_lazy('${4:url_for_success}')
# 
#     def get_context_data(self, **kwargs):
#         context = super($1, self).get_context_data(**kwargs)
#         return context
# 
#     def form_valid(self, form):
#         """${6:docstring for $1}"""
#         #!TODO Complete
#         return super($1, self).form_valid(form)
# 
#     def form_invalid(self, form):
#         """${7:docstring for $1}"""
#         #!TODO Complete
#         return super($1, self).form_valid(form)
# endsnippet
# 
# snippet tview "template view" b
# class ${1:ClassName}(TemplateView):
#     template_name = '${2:}'
# 
#     def get_context_data(self, **kwargs):
#         context = super($1, self).get_context_data(**kwargs)
#         ${3:}
#         return context
# endsnippet
# 
# snippet rview "reverse view" b
# class ${1:ClassName}(RedirectView):
#     permanent = ${2:true}
# 
# def get_redirect_url(self, **kwargs):
#     return reverse(${3})
# endsnippet
# 
# snippet lview "list view" b
# class ${1:ClassName}(ListView):
#     model = ${2:Model}
# 
#     def get_queryset(self):
#         queryset = ${3:$2.objects.all()}
#         ${4}
#     return queryset
# endsnippet
# 
# #localize
# snippet mt "Marc as translatable"
# _(${VISUAL})
# endsnippet
# 
# snippet ts "Translatable string"
# _(u"${1:string}")
# endsnippet
# 
# snippet tt "surround text as unicode string an make translatable"
# _(u"${VISUAL}")
# endsnippet
